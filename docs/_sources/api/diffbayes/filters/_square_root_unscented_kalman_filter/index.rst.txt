:mod:`diffbayes.filters._square_root_unscented_kalman_filter`
=============================================================

.. py:module:: diffbayes.filters._square_root_unscented_kalman_filter

.. autoapi-nested-parse::

   Private module; avoid importing from directly.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   diffbayes.filters._square_root_unscented_kalman_filter.SquareRootUnscentedKalmanFilter



.. py:class:: SquareRootUnscentedKalmanFilter(*, dynamics_model: DynamicsModel, measurement_model: KalmanFilterMeasurementModel, sigma_point_strategy: Optional[utils.SigmaPointStrategy] = None)

   Bases: :class:`diffbayes.base.KalmanFilterBase`

   .. autoapi-inheritance-diagram:: diffbayes.filters._square_root_unscented_kalman_filter.SquareRootUnscentedKalmanFilter
      :parts: 1
      :private-bases:

   Square-root formulation of UKF.

   From Algorithm 3.1 of Merwe et al [1].

   [1] The square-root unscented Kalman filter for state and parameter-estimation.
   https://ieeexplore.ieee.org/document/940586/

   .. method:: belief_covariance(self) -> types.CovarianceTorch
      :property:

      Posterior covariance. Shape should be ``(N, state_dim, state_dim)``.


   .. method:: _predict_step(self, *, controls: types.ControlsTorch) -> None

      Predict step.


   .. method:: _update_step(self, *, observations: types.ObservationsTorch) -> None

      Update step.



