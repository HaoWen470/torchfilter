:mod:`diffbayes.train`
======================

.. py:module:: diffbayes.train

.. autoapi-nested-parse::

   Reference implementations for training state estimators with learnable parameters.

   These are written with a custom
   `model manager <https://brentyi.github.io/fannypack/utils/buddy.html>`_ for brevity, but
   can be easily translated to raw PyTorch.



Package Contents
----------------

.. function:: train_dynamics_recurrent(buddy: fannypack.utils.Buddy, dynamics_model: diffbayes.base.DynamicsModel, dataloader: DataLoader, *, loss_function: Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = F.mse_loss, log_interval: int = 1) -> None

   Trains a dynamics model via backpropagation through time.

   :param buddy: Training helper.
   :type buddy: fannypack.utils.Buddy
   :param dynamics_model: Model to train.
   :type dynamics_model: diffbayes.base.DynamicsModel
   :param dataloader: Loader for a SubsequenceDataset.
   :type dataloader: DataLoader

   :keyword loss_function: Loss function, from ``torch.nn.functional``.
                           Defaults to MSE.
   :kwtype loss_function: callable, optional
   :keyword log_interval: Minibatches between each Tensorboard log.
   :kwtype log_interval: int, optional


.. function:: train_dynamics_single_step(buddy: fannypack.utils.Buddy, dynamics_model: diffbayes.base.DynamicsModel, dataloader: DataLoader, *, loss_function: Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = F.mse_loss, log_interval: int = 1) -> None

   Optimizes a dynamics model's single-step prediction accuracy.

   :param buddy: Training helper.
   :type buddy: fannypack.utils.Buddy
   :param dynamics_model: Model to train.
   :type dynamics_model: diffbayes.base.DynamicsModel
   :param dataloader: Loader for a SingleStepDataset.
   :type dataloader: DataLoader

   :keyword loss_function: Loss function, from ``torch.nn.functional``.
                           Defaults to MSE.
   :kwtype loss_function: callable, optional
   :keyword log_interval: Minibatches between each Tensorboard log.
   :kwtype log_interval: int, optional


.. function:: train_filter(buddy: fannypack.utils.Buddy, filter_model: diffbayes.base.Filter, dataloader: DataLoader, initial_covariance: torch.Tensor, *, loss_function: Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = F.mse_loss, log_interval: int = 1) -> None

   Trains a filter end-to-end via backpropagation through time for 1 epoch over a
   subsequence dataset.

   :param buddy: Training helper.
   :type buddy: fannypack.utils.Buddy
   :param filter_model: Model to train.
   :type filter_model: diffbayes.base.DynamicsModel
   :param dataloader: Loader for a SubsequenceDataset.
   :type dataloader: DataLoader
   :param initial_covariance: Covariance matrix of error in initial
                              posterior, whose mean is sampled from a Gaussian centered at the
                              ground-truth start state. Shape should be (state_dim, state_dim).
   :type initial_covariance: torch.Tensor

   :keyword loss_function: Loss function, from ``torch.nn.functional``.
                           Defaults to MSE.
   :kwtype loss_function: callable, optional
   :keyword log_interval: Minibatches between each Tensorboard log.
   :kwtype log_interval: int, optional


.. function:: train_particle_filter_measurement_model(buddy: fannypack.utils.Buddy, measurement_model: diffbayes.base.ParticleFilterMeasurementModel, dataloader: DataLoader, *, loss_function: Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = F.mse_loss, log_interval: int = 1) -> None

   Optimizes a dynamics model's single-step prediction accuracy.

   :param buddy: Training helper.
   :type buddy: fannypack.utils.Buddy
   :param dynamics_model: Model to train.
   :type dynamics_model: diffbayes.base.DynamicsModel
   :param dataloader: Loader for a SingleStepDataset.
   :type dataloader: DataLoader

   :keyword loss_function: Loss function, from ``torch.nn.functional``.
                           Defaults to MSE.
   :kwtype loss_function: callable, optional
   :keyword log_interval: Minibatches between each Tensorboard log.
   :kwtype log_interval: int, optional


