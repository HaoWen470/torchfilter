:orphan:

:mod:`diffbayes.base._particle_filter`
======================================

.. py:module:: diffbayes.base._particle_filter


Module Contents
---------------

.. py:class:: ParticleFilter(*, dynamics_model: DynamicsModel, measurement_model: ParticleFilterMeasurementModel, num_particles: int = 100, resample: bool = None, soft_resample_alpha: float = 1.0, estimation_method: str = 'weighted_average')

   Bases: :class:`diffbayes.base.Filter`, :class:`abc.ABC`

   Base class for a generic differentiable particle filter.

   .. attribute:: dynamics_model
      

      Forward model.

      :type: diffbayes.base.DynamicsModel


   .. attribute:: measurement_model
      

      Observation model.

      :type: diffbayes.base.ParticleFilterMeasurementModel


   .. attribute:: num_particles
      

      Number of particles to represent our belief distribution.
      Defaults to 100.

      :type: int


   .. attribute:: resample
      

      If True, we resample particles & normalize weights at each
      timestep. If unset (None), we automatically turn resampling on in eval mode
      and off in train mode.

      :type: bool


   .. attribute:: soft_resample_alpha
      

      Tunable constant for differentiable resampling, as described
      by Jonschkowski et al. in "Differentiable Particle Filters: End-to-End
      Learning with Algorithmic Priors": https://arxiv.org/abs/1805.11122.
      Defaults to 1.0 (disabled).

      :type: float


   .. attribute:: estimation_method
      

      Method of producing state estimates. Options include:


      * 'weighted_average': average of particles weighted by their weights.
      * 'argmax': state of highest weighted particle.

      :type: str


   .. attribute:: particle_states
      :annotation: :torch.Tensor

      Discrete particles representing our current belief
      distribution. Shape should be ``(N, M, state_dim)``.

      :type: torch.Tensor


   .. attribute:: particle_log_weights
      :annotation: :torch.Tensor

      Weights corresponding to each particle, stored as
      log-likelihoods. Shape should be ``(N, M)``.

      :type: torch.Tensor


   .. method:: initialize_beliefs(self, *, mean: torch.Tensor, covariance: torch.Tensor)


      Populates initial particles, which will be normally distributed.

      :param mean: Mean of belief. Shape should be
                   ``(N, state_dim)``.
      :type mean: torch.Tensor
      :param covariance: Covariance of belief. Shape should be
                         ``(N, state_dim, state_dim)``.
      :type covariance: torch.Tensor


   .. method:: forward(self, *, observations: types.ObservationsTorch, controls: types.ControlsTorch)


      Particle filter forward pass, single timestep.

      :param observations: observation inputs. should be
                           either a dict of tensors or tensor of shape ``(N, ...)``.
      :type observations: dict or torch.Tensor
      :param controls: control inputs. should be either a
                       dict of tensors or tensor of shape ``(N, ...)``.
      :type controls: dict or torch.Tensor

      :returns: *torch.Tensor* -- Predicted state for each batch element. Shape should
                be ``(N, state_dim).``



