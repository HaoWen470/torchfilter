:orphan:

:mod:`diffbayes.data._subsequence_dataset`
==========================================

.. py:module:: diffbayes.data._subsequence_dataset


Module Contents
---------------

.. py:class:: SubsequenceDataset(trajectories: List[types.TrajectoryTupleNumpy], subsequence_length: int)

   Bases: :class:`torch.utils.data.Dataset`

   A data preprocessor for producing training subsequences from
   a list of trajectories.

   Thin wrapper around ``diffbayes.data.split_trajectories()``.

   :param trajectories: list of trajectories, where each is a tuple of
                        ``(states, observations, controls)``. Each tuple member should be
                        either a numpy array or dict of numpy arrays with shape ``(T, ...)``.
   :type trajectories: list
   :param subsequence_length: # of timesteps per subsequence.
   :type subsequence_length: int

   .. method:: __getitem__(self, index: int)


      Get a subsequence from our dataset.

      :param index: Subsequence number in our dataset.
      :type index: int

      :returns: *tuple* -- ``(states, observations, controls)`` tuple that contains
                data for a single subsequence. Each tuple member should be either a
                numpy array or dict of numpy arrays with shape
                ``(subsequence_length, ...)``.


   .. method:: __len__(self)


      Total number of subsequences in the dataset.

      :returns: *int* -- Length of dataset.



