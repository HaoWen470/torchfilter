:orphan:

:mod:`torchfilter.filters._unscented_kalman_filter`
===================================================

.. py:module:: torchfilter.filters._unscented_kalman_filter

.. autoapi-nested-parse::

   Private module; avoid importing from directly.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   torchfilter.filters._unscented_kalman_filter.UnscentedKalmanFilter



.. py:class:: UnscentedKalmanFilter(*, dynamics_model: DynamicsModel, measurement_model: KalmanFilterMeasurementModel, sigma_point_strategy: Optional[utils.SigmaPointStrategy] = None)

   Bases: :class:`torchfilter.base.KalmanFilterBase`

   .. autoapi-inheritance-diagram:: torchfilter.filters._unscented_kalman_filter.UnscentedKalmanFilter
      :parts: 1

   Standard UKF.

   From Algorithm 2.1 of Merwe et al. [1]. For working with heteroscedastic noise
   models, we use the weighting approach described in [2].

   [1] The square-root unscented Kalman filter for state and parameter-estimation.
   https://ieeexplore.ieee.org/document/940586/

   [2] How to Train Your Differentiable Filter
   https://al.is.tuebingen.mpg.de/uploads_file/attachment/attachment/617/2020_RSS_WS_alina.pdf


